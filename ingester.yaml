---
# Source: cortex/templates/ingester-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: cortex-ingester
  labels:
    chart: cortex-0.0.1
    release: cortex
    heritage: Helm
    cortex: ingester
spec:
  ports:
    - port: 80
      name: http
      targetPort: http
  selector:
    app: cortex-ingester
    release: cortex
---

---
# Source: cortex/templates/ingester-dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cortex-ingester
  labels:
    chart: cortex-0.0.1
    release: cortex
    heritage: Helm
    cortex: ingester
spec:
  replicas: 3

  # Ingesters are not ready for at least 1 min
  # after creation.  This has to be in sync with
  # the ring timeout value, as this will stop a
  # stampede of new ingesters if we should loose
  # some.
  minReadySeconds: 60

  # Having maxSurge 0 and maxUnavailable 1 means
  # the deployment will update one ingester at a time
  # as it will have to stop one (making one unavailable)
  # before it can start one (surge of zero)
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1

  selector:
    matchLabels:
      app: cortex-ingester
      release: cortex
  template:
    metadata:
      labels:
        app: cortex-ingester
        release: cortex
        cortex: ingester
      annotations:
        prometheus.io/port: "80"
        prometheus.io/scrape: "true"
        sidecar.istio.io/inject: "false"
    spec:
      # Give ingesters 80 minutes grace to flush chunks and exit cleanly.
      # Service is available during this time, as long as we don't stop
      # too many ingesters at once.
      terminationGracePeriodSeconds: 4800

      tolerations:
        - effect: NoSchedule
          key: dedicated
          operator: Equal
          value: cortex
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: dedicated
                operator: In
                values:
                - cortex

      containers:
      - name: ingester
        #image: "quay.io/cortexproject/ingester:master-79bba2f9"
        image: quay.io/cortexproject/cortex:v0.4.0
        imagePullPolicy: IfNotPresent
        args:
        - -target=ingester
        - -ingester.join-after=30s
        - -ingester.claim-on-rollout=true
        #- -ingester.search-pending-for=5m
        - -consul.hostname=cortex-consul.cortex.svc.cluster.local:8500
        - -cassandra.addresses=cortex-cassandra.cortex.svc.cluster.local
        - -cassandra.keyspace=cortex
        - -cassandra.timeout=1000ms
        - -cassandra.replication-factor=2
        - -chunk.storage-client=cassandra
        - -dynamodb.chunk-table.prefix=cortex_chunks_
        - -dynamodb.chunk-table.tag=cortex=chunks
        - -dynamodb.chunk-table.from=2020-02-01
        - -dynamodb.chunk-table.period=168h
        - -dynamodb.periodic-table.prefix=cortex_weekly_
        - -dynamodb.periodic-table.tag=cortex=periodic-table
        - -dynamodb.periodic-table.from=2020-02-01
        - -dynamodb.periodic-table.period=168h
        #- -dynamodb.v6-schema-from=2020-02-01
        - -dynamodb.v9-schema-from=2020-02-01
        - -dynamodb.use-periodic-tables
        - -memcached.hostname=cortex-memcached.cortex.svc.cluster.local
        - -memcached.timeout=100ms
        - -memcached.service=memcache # Service port name
        - -memcached.timeout=500ms
        - -store.index-cache-write.memcached.hostname=cortex-memcached-index-write.cortex.svc.cluster.local
        - -store.index-cache-write.memcached.service=memcache # Service port name
        - -store.index-cache-write.memcached.timeout=500ms
        - -store.index-cache-read.memcached.hostname=cortex-memcached-index-read.cortex.svc.cluster.local
        - -store.index-cache-read.memcached.service=memcache # Service port name
        - -store.index-cache-read.memcached.timeout=500ms
        ports:
        - containerPort: 80
          name: http
        readinessProbe:
          httpGet:
            path: /ready
            port: 80
          initialDelaySeconds: 15
          timeoutSeconds: 1
        #resources:
        # limits:
        #   cpu: 4
        # requests:
        #   cpu: 4
        #   memory: 4Gi
